version: 2
jobs:
  build:

    working_directory: ~/app

    docker:
      - image: cimg/ruby:2.6.3
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: "test"

    steps:

      - checkout
      - restore_cache:
          key: bundle-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: ./go linter

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run: bin/rails db:create db:schema:load
      - run: ./go test-unit
      - run: ./go test-pact

  docker:

    docker:
      - image: sirech/dind-ruby:2.6.3
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle

    steps:

      - checkout
      - setup_remote_docker
      - restore_cache:
          key: bundle-2-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install --without ops development
      - save_cache:
          key: bundle-2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: ./go test-container
      - run:
          name: Publish docker image
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER $DOCKER_REGISTRY --password-stdin
            docker build . --tag $DOCKER_REGISTRY/shelf2-backend
            docker push $DOCKER_REGISTRY/shelf2-backend

  deploy:

    docker:
      - image: cimg/base:stable

    steps:
      - add_ssh_keys:
      - run: ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "${DEPLOY_PATH}/bin/update shelf2-backend"

  healthcheck:

    docker:
      - image: cimg/base:stable

    steps:
      - run: curl --connect-timeout 60 -s -f -o /dev/null "${SITE_URL}/rest/system/healthcheck"

workflows:
  version: 2
  pipeline:
    jobs:
      - build
      - docker:
          filters:
            branches:
              only: master
          requires:
            - build
      - deploy:
          requires:
            - docker
      - healthcheck:
          requires:
            - deploy
